"use client"
import type { NextPage } from 'next'
import Head from 'next/head'
import React, { useState } from 'react';
import { runConversation } from './aicomponent';
import { useDynamicContext } from '@dynamic-labs/sdk-react-core'

const Home: NextPage = () => {
  const [inputValue, setInputValue] = useState('')
  const [result, setResult] = useState('')
  const [resultComponent, setResultComponent] = useState<JSX.Element | null>(null)
  const { primaryWallet } = useDynamicContext();
  console.log(primaryWallet);


  const handleSubmitComponent = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault()
    const processedResult = await processInputcomponent(inputValue)
    setResult(processedResult)
  }

  const HelloWorld = () => {
    return <button>Hello, World!</button>
  }
  const processInputcomponent = async (input: string): Promise<string>  => {
    let output = '';
    console.log(input);
    await runConversation(input, primaryWallet).then((value) => {
      output = value;
    })
    .catch((error) => {
      console.error('Promise rejected with error: ' + error);
    });
    return output;
    //return <HelloWorld />
  }

  // const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {
  //   event.preventDefault()
  //   // Here we can add our processing logic
  //   let processedResult = '';
  //   await processInput(inputValue).then((value) => {
  //     processedResult = value;
  //   })
  //   .catch((error) => {
  //     console.error('Promise rejected with error: ' + error);
  //   });
  //   setResult(processedResult)
  // }

  // const processInput = async (input: string): Promise<string> => {
  //   // This is a simple example, replace it with your actual processing logic
  //   //const userPrompt = "What is 25 * 4 + 10?";
  //   let output = '';
  //   await runConversation(input).then((value) => {
  //     output = value;
  //   })
  //   .catch((error) => {
  //     console.error('Promise rejected with error: ' + error);
  //   });
  //   return output;
  // }

  return (
    <div>
      <Head>
        <title>Next.js Form Example</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col items-center justify-between p-24">
        <h1 className="text-4xl font-bold mb-8">AI Web3 Bot - Makes life easier ðŸ›¸</h1>
        
        <form onSubmit={handleSubmitComponent} className="w-full max-w-md space-y-4">
          <input 
            type="text" 
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            placeholder="Enter some text..."
            className="w-full md:w-96 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
          
          <button 
            type="submit"
            disabled={!inputValue}
            className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50"
          >
            Submit
          </button>
          {/* <div>
          {resultComponent && resultComponent}
          </div> */}
          
          {result && (
            <p className="mt-4 text-xl font-semibold">Result: {result}</p>
          )}
        </form>

      </main>
    </div>
  )
}

export default Home
